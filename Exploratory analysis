import pandas as pd
import numpy as np
from scipy.stats.stats import pearsonr  
from pandas.tseries.holiday import USFederalHolidayCalendar
from pandas.tseries.offsets import CustomBusinessDay
from datetime import datetime
from sklearn.model_selection import train_test_split
import math
import matplotlib.pyplot as plt
# from sklearn.feature_selection import SelectKBest
# from sklearn.pipeline import Pipeline
# from sklearn.decomposition import PCA
# from sklearn.grid_search import GridSearchCV
# from sklearn.pipeline import FeatureUnion
# from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor
# from sklearn.tree import DecisionTreeRegressor
# from sklearn.linear_model import LogisticRegression
# from sklearn.model_selection import cross_val_score
# from sklearn.cross_validation import KFold
# from sklearn.metrics import mean_squared_error, median_absolute_error
# import xgboost as xgb

location_2014 = pd.read_csv('Nice_Ride_2014_station_locations.csv')
location_2015 = pd.read_csv('Nice_Ride_2015_station_locations.csv')
location_2016 = pd.read_csv('Nice_Ride_2016_station_locations.csv')
history_2014 = pd.read_csv('Nice_Ride_trip_history_2014_season.csv')
history_2015 = pd.read_csv('Nice_Ride_trip_history_2015_season.csv')
history_2016 = pd.read_csv('Nice_Ride_trip_history_2016_season.csv')

# combine 3 yrs dataset
location = pd.concat([location_2014,location_2015,location_2016], axis=0)
location = pd.reset_index()
history = pd.concat([history_2014,history_2015,history_2016])
history = pd.reset_index()

# check missing data
location.head()
location.isnull().sum()
history.head()
history.isnull().sum()

# convert milliseconds to minutes
history['Total duration (ms)'].describe()
history['Total duration (min)'] = history['Total duration (ms)'] / 60000
history['Total duration (min)'].quantile(0.995)

# Remove outliers which the durations are higher than 24 hrs or less than 1 min
history = history[history['Total duration (min)'] <= 1440]
history['Total duration (min)'].quantile(0.005)
history = history[history['Total duration (min)'] >= 1]
history['Total duration (min)'].describe()
